require('dotenv').config();
const mongoose = require('mongoose');
const User = require('./models/User');
const Employee = require('./models/Employee');
const Transaction = require('./models/Transaction');
const Client = require('./models/Client');
const Category = require('./models/Category');

// ุงุณุชุฎุฏุงู ูุงุนุฏุฉ ุจูุงูุงุช Atlas
const MONGO_URI = process.env.MONGO_URI || 
                  process.env.MONGODB_URI || 
                  "mongodb+srv://Anter:anter1234@anter.1cdaq.mongodb.net/?retryWrites=true&w=majority&appName=Anter";

const resetDatabase = async () => {
  try {
    console.log('๐จ ุชุญุฐูุฑ: ุณูุชู ุญุฐู ุฌููุน ุงูุจูุงูุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช!');
    console.log('โณ ุงูุชุธุงุฑ 5 ุซูุงู ููุฅูุบุงุก ุฅุฐุง ูุฒู ุงูุฃูุฑ...');
    
    // ุงูุชุธุงุฑ 5 ุซูุงู ููุณูุงุญ ุจุงูุฅูุบุงุก
    await new Promise(resolve => setTimeout(resolve, 5000));
    
    // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
    await mongoose.connect(MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('๐ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');

    // ุญุฐู ุฌููุน ุงูุจูุงูุงุช
    console.log('๐๏ธ ุญุฐู ุฌููุน ุงูุจูุงูุงุช...');
    await User.deleteMany({});
    await Employee.deleteMany({});
    await Transaction.deleteMany({});
    await Client.deleteMany({});
    await Category.deleteMany({});
    
    console.log('โ ุชู ุญุฐู ุฌููุน ุงูุจูุงูุงุช');

    // ุฅูุดุงุก ูุณุชุฎุฏู admin ุฌุฏูุฏ
    console.log('๐ค ุฅูุดุงุก ูุณุชุฎุฏู admin ุฌุฏูุฏ...');
    const adminUser = new User({
      username: 'admin',
      email: 'admin@example.com',
      password: 'admin123',
      role: 'admin',
      status: 'active',
      firstName: 'ุงููุฏูุฑ',
      lastName: 'ุงูุนุงู',
      phone: '01234567890',
      personalInfo: {
        nationalId: '12345678901234',
        address: 'ุงููุงูุฑุฉุ ูุตุฑ',
        birthDate: new Date('1980-01-01'),
        gender: 'male',
        maritalStatus: 'married'
      }
    });
    
    await adminUser.save();
    console.log('โ ุชู ุฅูุดุงุก ูุณุชุฎุฏู admin');

    // ุฅูุดุงุก ุจุนุถ ุงูุชุตูููุงุช ุงูุฃุณุงุณูุฉ
    console.log('๐ ุฅูุดุงุก ุงูุชุตูููุงุช ุงูุฃุณุงุณูุฉ...');
    const categories = [
      { name: 'ุฑูุงุชุจ', type: 'expense', description: 'ุฑูุงุชุจ ุงูููุธููู' },
      { name: 'ูุจูุนุงุช', type: 'income', description: 'ุฅูุฑุงุฏุงุช ุงููุจูุนุงุช' },
      { name: 'ุฅูุฌุงุฑ', type: 'expense', description: 'ูุตุงุฑูู ุงูุฅูุฌุงุฑ' },
      { name: 'ูุฑุงูู', type: 'expense', description: 'ููุงุชูุฑ ุงูููุฑุจุงุก ูุงููุงุก ูุงูุบุงุฒ' },
      { name: 'ุนูููุงุช', type: 'income', description: 'ุนูููุงุช ุงููุจูุนุงุช ูุงูุฎุฏูุงุช' }
    ];

    for (const catData of categories) {
      const category = new Category(catData);
      await category.save();
    }
    
    console.log('โ ุชู ุฅูุดุงุก ุงูุชุตูููุงุช ุงูุฃุณุงุณูุฉ');

    // ุฅุบูุงู ุงูุงุชุตุงู
    await mongoose.disconnect();
    console.log('โ ุชู ุฅุบูุงู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    
    console.log('\n๐ ุชู ุฅุนุงุฏุฉ ุชุนููู ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log('\n๐ ุจูุงูุงุช ุชุณุฌูู ุงูุฏุฎูู:');
    console.log('Username: admin');
    console.log('Password: admin123');
    
    process.exit(0);
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุงุฏุฉ ุชุนููู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error);
    process.exit(1);
  }
};

// ุชุดุบูู ุฅุนุงุฏุฉ ุงูุชุนููู
resetDatabase(); 